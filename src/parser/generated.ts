// @ts-nocheck
// This file is generated by scripts/build-parser.cjs. Do not edit.
// @generated by Peggy 5.0.6.
//
// https://peggyjs.org/



  import { validatePseudoSelector } from './pseudo-validator.js';

class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";
  }

  format(sources) {
    let str = "Error: " + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find(s => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
        ? this.location.source.offset(s)
        : s;
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = "".padEnd(offset_s.line.toString().length, " ");
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = (last - s.column) || 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + offset_s.line + " | " + line + "\n"
            + filler + " | " + "".padEnd(s.column - 1, " ")
            + "".padEnd(hatLen, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    function classEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map(
          part => (Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part))
        );

        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

      any() {
        return "any character";
      },

      end() {
        return "end of input";
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    Start: peg$parseStart,
  };
  let peg$startRuleFunction = peg$parseStart;

  const peg$c0 = "create";
  const peg$c1 = "token";
  const peg$c2 = "value";
  const peg$c3 = ";";
  const peg$c4 = "selector";
  const peg$c5 = "as";
  const peg$c6 = "and";
  const peg$c7 = "(";
  const peg$c8 = ")";
  const peg$c9 = "or";
  const peg$c10 = "child";
  const peg$c11 = ",";
  const peg$c12 = "desc";
  const peg$c13 = "join";
  const peg$c14 = "on";
  const peg$c15 = "adj";
  const peg$c16 = "sib";
  const peg$c17 = "e";
  const peg$c18 = "c";
  const peg$c19 = "p";
  const peg$c20 = "pe";
  const peg$c21 = "id";
  const peg$c22 = "attr";
  const peg$c23 = "style";
  const peg$c24 = "scoped";
  const peg$c25 = "to";
  const peg$c26 = "limit";
  const peg$c27 = "=";
  const peg$c28 = "alter";
  const peg$c29 = "add";
  const peg$c30 = "set";
  const peg$c31 = "delete";
  const peg$c32 = "from";
  const peg$c33 = "style_props";
  const peg$c34 = "where";
  const peg$c35 = "prop";
  const peg$c36 = "drop";
  const peg$c37 = "keyframes";
  const peg$c38 = "font_face";
  const peg$c39 = "family";
  const peg$c40 = "property";
  const peg$c41 = "tokens";
  const peg$c42 = "name";
  const peg$c43 = "select";
  const peg$c44 = "describe";
  const peg$c45 = "begin";
  const peg$c46 = "commit";
  const peg$c47 = "rollback";
  const peg$c48 = "layers";
  const peg$c49 = "layer";
  const peg$c50 = "butter";
  const peg$c51 = "raw";
  const peg$c52 = "import";
  const peg$c53 = "css";
  const peg$c54 = "media";
  const peg$c55 = "page";
  const peg$c56 = "counter_style";
  const peg$c57 = "font_feature_values";
  const peg$c58 = "font_palette_values";
  const peg$c59 = "starting_style";
  const peg$c60 = "insert";
  const peg$c61 = "into";
  const peg$c62 = "values";
  const peg$c63 = "update";
  const peg$c64 = "\"";
  const peg$c65 = "'";
  const peg$c66 = "\\\"";
  const peg$c67 = "\\n";
  const peg$c68 = "\\r";
  const peg$c69 = "\\t";
  const peg$c70 = "\\'";
  const peg$c71 = "--";
  const peg$c72 = "\r\n";
  const peg$c73 = "/*";
  const peg$c74 = "*/";
  const peg$c75 = "s";
  const peg$c76 = "t";
  const peg$c77 = "a";
  const peg$c78 = "d";

  const peg$r0 = /^[a-zA-Z_]/;
  const peg$r1 = /^[a-zA-Z0-9_\-]/;
  const peg$r2 = /^[^"\\]/;
  const peg$r3 = /^[^'\\]/;
  const peg$r4 = /^[),;]/;
  const peg$r5 = /^[(-)]/;
  const peg$r6 = /^[^,()\r\n; \t\u2028\u2029]/;
  const peg$r7 = /^[^,);\r\n]/;
  const peg$r8 = /^[ \t\r\n\u2028\u2029]/;
  const peg$r9 = /^[^\n\r]/;
  const peg$r10 = /^[\n\r]/;

  const peg$e0 = peg$literalExpectation("CREATE", true);
  const peg$e1 = peg$literalExpectation("TOKEN", true);
  const peg$e2 = peg$literalExpectation("VALUE", true);
  const peg$e3 = peg$literalExpectation(";", false);
  const peg$e4 = peg$literalExpectation("SELECTOR", true);
  const peg$e5 = peg$literalExpectation("AS", true);
  const peg$e6 = peg$literalExpectation("AND", true);
  const peg$e7 = peg$literalExpectation("(", false);
  const peg$e8 = peg$literalExpectation(")", false);
  const peg$e9 = peg$literalExpectation("OR", true);
  const peg$e10 = peg$literalExpectation("CHILD", true);
  const peg$e11 = peg$literalExpectation(",", false);
  const peg$e12 = peg$literalExpectation("DESC", true);
  const peg$e13 = peg$literalExpectation("JOIN", true);
  const peg$e14 = peg$literalExpectation("ON", true);
  const peg$e15 = peg$literalExpectation("ADJ", true);
  const peg$e16 = peg$literalExpectation("SIB", true);
  const peg$e17 = peg$literalExpectation("E", true);
  const peg$e18 = peg$literalExpectation("C", true);
  const peg$e19 = peg$literalExpectation("P", true);
  const peg$e20 = peg$literalExpectation("PE", true);
  const peg$e21 = peg$literalExpectation("ID", true);
  const peg$e22 = peg$literalExpectation("ATTR", true);
  const peg$e23 = peg$literalExpectation("STYLE", true);
  const peg$e24 = peg$literalExpectation("SCOPED", true);
  const peg$e25 = peg$literalExpectation("TO", true);
  const peg$e26 = peg$literalExpectation("LIMIT", true);
  const peg$e27 = peg$literalExpectation("=", false);
  const peg$e28 = peg$literalExpectation("ALTER", true);
  const peg$e29 = peg$literalExpectation("ADD", true);
  const peg$e30 = peg$literalExpectation("SET", true);
  const peg$e31 = peg$literalExpectation("DELETE", true);
  const peg$e32 = peg$literalExpectation("FROM", true);
  const peg$e33 = peg$literalExpectation("style_props", true);
  const peg$e34 = peg$literalExpectation("WHERE", true);
  const peg$e35 = peg$literalExpectation("selector", true);
  const peg$e36 = peg$literalExpectation("prop", true);
  const peg$e37 = peg$literalExpectation("DROP", true);
  const peg$e38 = peg$literalExpectation("KEYFRAMES", true);
  const peg$e39 = peg$literalExpectation("FONT_FACE", true);
  const peg$e40 = peg$literalExpectation("family", true);
  const peg$e41 = peg$literalExpectation("PROPERTY", true);
  const peg$e42 = peg$literalExpectation("tokens", true);
  const peg$e43 = peg$literalExpectation("name", true);
  const peg$e44 = peg$literalExpectation("SELECT", true);
  const peg$e45 = peg$literalExpectation("DESCRIBE", true);
  const peg$e46 = peg$literalExpectation("BEGIN", true);
  const peg$e47 = peg$literalExpectation("COMMIT", true);
  const peg$e48 = peg$literalExpectation("ROLLBACK", true);
  const peg$e49 = peg$literalExpectation("LAYERS", true);
  const peg$e50 = peg$literalExpectation("LAYER", true);
  const peg$e51 = peg$literalExpectation("BUTTER", true);
  const peg$e52 = peg$literalExpectation("RAW", true);
  const peg$e53 = peg$literalExpectation("IMPORT", true);
  const peg$e54 = peg$literalExpectation("CSS", true);
  const peg$e55 = peg$literalExpectation("media", true);
  const peg$e56 = peg$literalExpectation("PAGE", true);
  const peg$e57 = peg$literalExpectation("COUNTER_STYLE", true);
  const peg$e58 = peg$literalExpectation("FONT_FEATURE_VALUES", true);
  const peg$e59 = peg$literalExpectation("FONT_PALETTE_VALUES", true);
  const peg$e60 = peg$literalExpectation("STARTING_STYLE", true);
  const peg$e61 = peg$literalExpectation("INSERT", true);
  const peg$e62 = peg$literalExpectation("INTO", true);
  const peg$e63 = peg$literalExpectation("value", true);
  const peg$e64 = peg$literalExpectation("VALUES", true);
  const peg$e65 = peg$literalExpectation("UPDATE", true);
  const peg$e66 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false, false);
  const peg$e67 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "-"], false, false, false);
  const peg$e68 = peg$literalExpectation("\"", false);
  const peg$e69 = peg$literalExpectation("'", false);
  const peg$e70 = peg$literalExpectation("\\\"", false);
  const peg$e71 = peg$literalExpectation("\\n", false);
  const peg$e72 = peg$literalExpectation("\\r", false);
  const peg$e73 = peg$literalExpectation("\\t", false);
  const peg$e74 = peg$classExpectation(["\"", "\\"], true, false, false);
  const peg$e75 = peg$literalExpectation("\\'", false);
  const peg$e76 = peg$classExpectation(["'", "\\"], true, false, false);
  const peg$e77 = peg$classExpectation([")", ",", ";"], false, false, false);
  const peg$e78 = peg$classExpectation([["(", ")"]], false, false, false);
  const peg$e79 = peg$anyExpectation();
  const peg$e80 = peg$classExpectation([",", "(", ")", "\r", "\n", ";", " ", "\t", "\u2028", "\u2029"], true, false, false);
  const peg$e81 = peg$classExpectation([",", ")", ";", "\r", "\n"], true, false, false);
  const peg$e82 = peg$classExpectation([" ", "\t", "\r", "\n", "\u2028", "\u2029"], false, false, false);
  const peg$e83 = peg$literalExpectation("--", false);
  const peg$e84 = peg$classExpectation(["\n", "\r"], true, false, false);
  const peg$e85 = peg$literalExpectation("\r\n", false);
  const peg$e86 = peg$classExpectation(["\n", "\r"], false, false, false);
  const peg$e87 = peg$literalExpectation("/*", false);
  const peg$e88 = peg$literalExpectation("*/", false);
  const peg$e89 = peg$literalExpectation("S", true);
  const peg$e90 = peg$literalExpectation("T", true);
  const peg$e91 = peg$literalExpectation("A", true);
  const peg$e92 = peg$literalExpectation("D", true);

  function peg$f0(statements) {    return statements;  }
  function peg$f1(head, tail) {    return [head, ...tail.map(t => t[1])];  }
  function peg$f2(name, value) {
    return { type: 'Token', name, value };
  }
  function peg$f3(name, def) {
    return { type: 'Selector', name, definition: def };
  }
  function peg$f4(selectors) {    return { kind: 'And', selectors };  }
  function peg$f5(selectors) {    return { kind: 'Or', selectors };  }
  function peg$f6(parent, child) {    return { kind: 'Child', parent, child };  }
  function peg$f7(ancestor, descendant) {    return { kind: 'Descendant', ancestor, descendant };  }
  function peg$f8(jt, left, right) {    return { kind: 'Join', joinType: jt, left, right };  }
  function peg$f9() {    return 'AND';  }
  function peg$f10() {    return 'DESC';  }
  function peg$f11() {    return 'CHILD';  }
  function peg$f12() {    return 'ADJ';  }
  function peg$f13() {    return 'SIB';  }
  function peg$f14(first, rest) {    return [first, ...rest.map(r => r[3])];  }
  function peg$f15(v) {    return { kind: 'Element', value: v };  }
  function peg$f16(v) {    return { kind: 'Class', value: v };  }
  function peg$f17(v) {
    const validation = validatePseudoSelector(v);
    if (!validation.valid) {
      error(`Invalid pseudo-selector P('${v}'): ${validation.error}`);
    }
    return { kind: 'Pseudo', value: v };
  }
  function peg$f18(v) {    return { kind: 'PseudoElement', value: v };  }
  function peg$f19(v) {    return { kind: 'Id', value: v };  }
  function peg$f20(n) {    return { kind: 'Attr', name: n };  }
  function peg$f21(n, v) {    return { kind: 'Attr', name: n, value: v };  }
  function peg$f22(n, v, op) {
    const o = op;
    if (!['^=','$=','*=','~=','|=','='].includes(o)) throw new Error('Invalid ATTR operator: ' + o);
    return { kind: 'Attr', name: n, value: v, operator: o };
  }
  function peg$f23(n, v, op, fl) {
    const o = op; const f = fl.toLowerCase();
    if (!['^=','$=','*=','~=','|=','='].includes(o)) throw new Error('Invalid ATTR operator: ' + o);
    if (!['i','s'].includes(f)) throw new Error('Invalid ATTR flag: ' + fl);
    return { kind: 'Attr', name: n, value: v, operator: o, flag: f };
  }
  function peg$f24(id) {    return { kind: 'Ref', name: id };  }
  function peg$f25(selector, scope, props, where) {
    return { type: 'Style', selector, properties: props, responsive: where, scopeRoot: scope?.root, scopeLimit: scope?.limit };
  }
  function peg$f26(root, limit) {
    return { root, limit: limit ? limit[2] : undefined };
  }
  function peg$f27(head, tail) {    return [head, ...tail.map(t => t[3])];  }
  function peg$f28(name, value) {    return { name, value };  }
  function peg$f29(selector, where, action, props) {
    return { type: 'AlterStyle', selector, action, properties: props, responsive: where };
  }
  function peg$f30() {    return 'ADD';  }
  function peg$f31() {    return 'SET';  }
  function peg$f32(selector, prop) {
    return { type: 'Delete', selector, property: prop };
  }
  function peg$f33(selector) {    return { type: 'Drop', selector };  }
  function peg$f34(name) {    return { type: 'DropToken', name }  }
  function peg$f35(name) {    return { type: 'DropKeyframes', name }  }
  function peg$f36(fam) {    return { type: 'DropFontFace', family: fam }  }
  function peg$f37(name) {    return { type: 'DropProperty', name }  }
  function peg$f38(nm) {    return { type: 'DeleteToken', name: nm };  }
  function peg$f39(sel, opt) {
    const whereBody = opt ? opt[2] : null;
    const responsive = whereBody ? (function(){
      const src = whereBody.trim();
      let m;
      if ((m = src.match(/^width\s+between\s+([^\s]+)\s+and\s+([^\s]+)$/i))) return { type: 'WidthBetween', min: m[1], max: m[2] };
      if ((m = src.match(/^width\s*(>=|>)\s*([^\s]+)$/i))) return { type: 'WidthMin', min: m[2] };
      if ((m = src.match(/^width\s*(<=|<)\s*([^\s]+)$/i))) return { type: 'WidthMax', max: m[2] };
      if ((m = src.match(/^prefers[_ ]?color[_ ]?scheme\s*=\s*(dark|light)$/i))) return { type: 'MediaFeature', feature: 'prefers-color-scheme', value: m[1].toLowerCase() };
      if ((m = src.match(/^orientation\s*=\s*(portrait|landscape)$/i))) return { type: 'MediaFeature', feature: 'orientation', value: m[1].toLowerCase() };
      if ((m = src.match(/^prefers[_ ]?reduced[_ ]?motion\s*=\s*(reduce|no-preference)$/i))) return { type: 'MediaFeature', feature: 'prefers-reduced-motion', value: m[1].toLowerCase() };
      if ((m = src.match(/^color[_ ]?gamut\s*=\s*(srgb|p3|rec2020)$/i))) return { type: 'MediaFeature', feature: 'color-gamut', value: m[1].toLowerCase() };
      if ((m = src.match(/^forced[_ ]?colors\s*=\s*(active|none)$/i))) return { type: 'MediaFeature', feature: 'forced-colors', value: m[1].toLowerCase() };
      if ((m = src.match(/^pointer\s*=\s*(none|coarse|fine)$/i))) return { type: 'MediaFeature', feature: 'pointer', value: m[1].toLowerCase() };
      if ((m = src.match(/^hover\s*=\s*(hover|none)$/i))) return { type: 'MediaFeature', feature: 'hover', value: m[1].toLowerCase() };
      if ((m = src.match(/^resolution\s*=\s*([0-9]+(?:\.[0-9]+)?dppx|[0-9]+dpi|[0-9]+dpcm)$/i))) return { type: 'MediaFeature', feature: 'resolution', value: m[1].toLowerCase() };
      if ((m = src.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*>\s*([^\s]+)$/i))) return { type: 'Container', container: m[1], min: m[2] };
      if ((m = src.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*<\s*([^\s]+)$/i))) return { type: 'Container', container: m[1], max: m[2] };
      if ((m = src.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s+style\s*\((.+)\)$/i))) return { type: 'ContainerStyle', container: m[1], condition: '(' + m[2].trim() + ')' };
      return null;
    })() : null;
    return { type: 'SelectStyleProps', selector: sel, responsive };
  }
  function peg$f40(nm) {    return { type: 'DescribeSelector', name: nm };  }
  function peg$f41() {    return { type: 'Begin' };  }
  function peg$f42() {    return { type: 'Commit' };  }
  function peg$f43() {    return { type: 'Rollback' };  }
  function peg$f44(layers) {
    return { type: 'Layer', layers };
  }
  function peg$f45(h, t) {    return [h, ...t.map(x => x[3])];  }
  function peg$f46(layer) {
    return { type: 'SetLayer', layer };
  }
  function peg$f47(mode) {
    return { type: 'Butter', mode };
  }
  function peg$f48(css) {    return { type: 'Raw', css };  }
  function peg$f49(name, props) {
    return { type: 'Property', name, properties: props };
  }
  function peg$f50(fam, props) {
    return { type: 'FontFace', family: fam, properties: props };
  }
  function peg$f51(name, frames) {
    return { type: 'Keyframes', name, frames };
  }
  function peg$f52(head, tail) {    return [head, ...tail.map(t => t[3])];  }
  function peg$f53(off, props) {    return { offset: off, properties: props };  }
  function peg$f54(path, media) {
    return { type: 'Import', importType: 'css', path, media: media ? media[2] : undefined };
  }
  function peg$f55(path) {
    return { type: 'Import', importType: 'sql', path };
  }
  function peg$f56(pseudo, props) {
    return { type: 'Page', pseudo, properties: props };
  }
  function peg$f57(pseudo) {
    return { type: 'DropPage', pseudo };
  }
  function peg$f58(name, props) {
    return { type: 'CounterStyle', name, properties: props };
  }
  function peg$f59(name) {
    return { type: 'DropCounterStyle', name };
  }
  function peg$f60(family, props) {
    return { type: 'FontFeatureValues', family, properties: props };
  }
  function peg$f61(family) {
    return { type: 'DropFontFeatureValues', family };
  }
  function peg$f62(name, props) {
    return { type: 'FontPaletteValues', name, properties: props };
  }
  function peg$f63(name) {
    return { type: 'DropFontPaletteValues', name };
  }
  function peg$f64(selector, props) {
    return { type: 'StartingStyle', selector, properties: props };
  }
  function peg$f65(selector) {
    return { type: 'DropStartingStyle', selector };
  }
  function peg$f66(sel, prop, val) {
    return { type: 'AlterStyle', selector: sel, action: 'SET', properties: [{ name: prop, value: val }] };
  }
  function peg$f67(name, value) {    return { name, value };  }
  function peg$f68(head, tail) {    return [head, ...tail.map(t => t[3])];  }
  function peg$f69(assigns, sel, opt) {
    const whereBody = opt ? opt[2] : null;
    const responsive = whereBody ? (function(){
      const src = whereBody.trim();
      const m1 = src.match(/^width\s+between\s+([^\s]+)\s+and\s+([^\s]+)$/i);
      if (m1) return { type: 'WidthBetween', min: m1[1], max: m1[2] };
      const m1a = src.match(/^width\s*(>=|>)\s*([^\s]+)$/i);
      if (m1a) return { type: 'WidthMin', min: m1a[2] };
      const m1b = src.match(/^width\s*(<=|<)\s*([^\s]+)$/i);
      if (m1b) return { type: 'WidthMax', max: m1b[2] };
      const m2 = src.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*>\s*([^\s]+)$/i);
      if (m2) return { type: 'Container', container: m2[1], min: m2[2] };
      const m2b = src.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*<\s*([^\s]+)$/i);
      if (m2b) return { type: 'Container', container: m2b[1], max: m2b[2] };
      const m2c = src.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s+style\s*\((.+)\)$/i);
      if (m2c) return { type: 'ContainerStyle', container: m2c[1], condition: '(' + m2c[2].trim() + ')' };
      const m3 = src.match(/^prefers[_ ]?color[_ ]?scheme\s*=\s*(dark|light)$/i);
      if (m3) return { type: 'MediaFeature', feature: 'prefers-color-scheme', value: m3[1].toLowerCase() };
      const m4 = src.match(/^orientation\s*=\s*(portrait|landscape)$/i);
      if (m4) return { type: 'MediaFeature', feature: 'orientation', value: m4[1].toLowerCase() };
      return null;
    })() : null;
    return { type: 'AlterStyle', selector: sel, action: 'SET', properties: assigns, responsive };
  }
  function peg$f70(nm, vv) {
    return { type: 'Token', name: nm, value: vv };
  }
  function peg$f71(vv, nm) {
    return { type: 'Token', name: nm, value: vv };
  }
  function peg$f72(cs) {    return cs.join("");  }
  function peg$f73(cs) {    return cs.join("");  }
  function peg$f74() {    return '"';  }
  function peg$f75() {    return "\n";  }
  function peg$f76() {    return "\r";  }
  function peg$f77() {    return "\t";  }
  function peg$f78() {    return "'";  }
  function peg$f79() {    return "\n";  }
  function peg$f80() {    return "\r";  }
  function peg$f81() {    return "\t";  }
  function peg$f82(head, tail) {
    return [head, ...tail.map(t => t[t.length - 1])].join(' ');
  }
  function peg$f83(cs) {    return '"' + cs.join("") + '"';  }
  function peg$f84(cs) {    return '\'' + cs.join("") + '\'';  }
  function peg$f85(name, arg) {
    return (arg != null) ? name + '(' + arg + ')' : name + '()';
  }
  function peg$f86(head, tail) {    return head + tail.join('');  }
  function peg$f87(c) {    return '(' + (c || '') + ')';  }
  function peg$f88(chars) {    return chars;  }
  function peg$f89(v) {    return v.trim();  }
  function peg$f90(v) {    return v.trim();  }
  function peg$f91(body) {
    const src = body.trim();
    // Simple fast path to preserve historical node types for tests
    let m;
    if ((m = src.match(/^width\s+between\s+([^\s]+)\s+and\s+([^\s]+)$/i))) return { type: 'WidthBetween', min: m[1], max: m[2] };
    if ((m = src.match(/^width\s*(>=|>)\s*([^\s]+)$/i))) return { type: 'WidthMin', min: m[2] };
    if ((m = src.match(/^width\s*(<=|<)\s*([^\s]+)$/i))) return { type: 'WidthMax', max: m[2] };
    if ((m = src.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s+(?:inline\s+)?>\s*([^\s]+)$/i))) return { type: 'Container', container: m[1], min: m[2], axis: /\sinline\s/i.test(src) ? 'inline' : undefined };
    if ((m = src.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s+(?:inline\s+)?<\s*([^\s]+)$/i))) return { type: 'Container', container: m[1], max: m[2], axis: /\sinline\s/i.test(src) ? 'inline' : undefined };
    if ((m = src.match(/^prefers[_ ]?color[_ ]?scheme\s*=\s*(dark|light)$/i))) return { type: 'MediaFeature', feature: 'prefers-color-scheme', value: m[1].toLowerCase() };
    if ((m = src.match(/^orientation\s*=\s*(portrait|landscape)$/i))) return { type: 'MediaFeature', feature: 'orientation', value: m[1].toLowerCase() };
    if ((m = src.match(/^prefers[_ ]?reduced[_ ]?motion\s*=\s*(reduce|no-preference)$/i))) return { type: 'MediaFeature', feature: 'prefers-reduced-motion', value: m[1].toLowerCase() };
    if ((m = src.match(/^color[_ ]?gamut\s*=\s*(srgb|p3|rec2020)$/i))) return { type: 'MediaFeature', feature: 'color-gamut', value: m[1].toLowerCase() };
    if ((m = src.match(/^forced[_ ]?colors\s*=\s*(active|none)$/i))) return { type: 'MediaFeature', feature: 'forced-colors', value: m[1].toLowerCase() };
    if ((m = src.match(/^pointer\s*=\s*(none|coarse|fine)$/i))) return { type: 'MediaFeature', feature: 'pointer', value: m[1].toLowerCase() };
    if ((m = src.match(/^hover\s*=\s*(hover|none)$/i))) return { type: 'MediaFeature', feature: 'hover', value: m[1].toLowerCase() };
    if ((m = src.match(/^resolution\s*=\s*([0-9]+(?:\.[0-9]+)?dppx|[0-9]+dpi|[0-9]+dpcm)$/i))) return { type: 'MediaFeature', feature: 'resolution', value: m[1].toLowerCase() };
    if ((m = src.match(/^supports\s*\((.+)\)$/i))) return { type: 'Supports', condition: '(' + m[1] + ')' };
    function stripParens(s) {
      s = s.trim();
      while (s.startsWith('(') && s.endsWith(')')) {
        const inner = s.slice(1, -1).trim();
        // ensure balanced
        let d=0, ok=true;
        for (let i=0;i<inner.length;i++){ const c=inner[i]; if(c==='(') d++; else if(c===')'){ if(d===0){ok=false;break;} d--; } }
        if (!ok || d!==0) break;
        s = inner;
      }
      return s;
    }
    function splitTop(s, kw) {
      const out=[]; let d=0; let i=0; const up = s.toUpperCase();
      let last=0; let betweenPending=false;
      while (i < s.length) {
        const ch = s[i];
        if (ch==='(') { d++; i++; continue; }
        if (ch===')') { d = Math.max(0,d-1); i++; continue; }
        if (d===0) {
          // Detect BETWEEN token to avoid splitting on the next AND
          if (kw === 'AND' && up.startsWith(' BETWEEN ', i)) {
            betweenPending = true;
            i += ' BETWEEN '.length;
            continue;
          }
          if (up.startsWith(' '+kw+' ', i)) {
            if (kw === 'AND' && betweenPending) {
              // consume this AND as part of BETWEEN and reset flag
              betweenPending = false;
              i += (' '+kw+' ').length;
              continue;
            }
            out.push(s.slice(last, i));
            i += kw.length + 2;
            last = i;
            continue;
          }
        }
        i++;
      }
      out.push(s.slice(last));
      return out.map(stripParens).filter(Boolean);
    }
    function parseSingle(s) {
      s = stripParens(s);
      let m;
      if ((m = s.match(/^width\s+between\s+([^\s]+)\s+and\s+([^\s]+)$/i))) return { kind: 'media', min: m[1], max: m[2] };
      if ((m = s.match(/^width\s*(>=|>)\s*([^\s]+)$/i))) return { kind: 'media', min: m[2] };
      if ((m = s.match(/^width\s*(<=|<)\s*([^\s]+)$/i))) return { kind: 'media', max: m[2] };
      if ((m = s.match(/^prefers[_ ]?color[_ ]?scheme\s*=\s*(dark|light)$/i))) return { kind: 'media', features: ['(prefers-color-scheme: ' + m[1].toLowerCase() + ')'] };
      if ((m = s.match(/^orientation\s*=\s*(portrait|landscape)$/i))) return { kind: 'media', features: ['(orientation: ' + m[1].toLowerCase() + ')'] };
      if ((m = s.match(/^prefers[_ ]?reduced[_ ]?motion\s*=\s*(reduce|no-preference)$/i))) return { kind: 'media', features: ['(prefers-reduced-motion: ' + m[1].toLowerCase() + ')'] };
      if ((m = s.match(/^color[_ ]?gamut\s*=\s*(srgb|p3|rec2020)$/i))) return { kind: 'media', features: ['(color-gamut: ' + m[1].toLowerCase() + ')'] };
      if ((m = s.match(/^forced[_ ]?colors\s*=\s*(active|none)$/i))) return { kind: 'media', features: ['(forced-colors: ' + m[1].toLowerCase() + ')'] };
      if ((m = s.match(/^pointer\s*=\s*(none|coarse|fine)$/i))) return { kind: 'media', features: ['(pointer: ' + m[1].toLowerCase() + ')'] };
      if ((m = s.match(/^hover\s*=\s*(hover|none)$/i))) return { kind: 'media', features: ['(hover: ' + m[1].toLowerCase() + ')'] };
      if ((m = s.match(/^resolution\s*=\s*([0-9]+(?:\.[0-9]+)?dppx|[0-9]+dpi|[0-9]+dpcm)$/i))) return { kind: 'media', features: ['(resolution: ' + m[1].toLowerCase() + ')'] };
      if ((m = s.match(/^supports\s*\((.+)\)$/i))) return { kind: 'supports', condition: '(' + m[1] + ')' };
      if ((m = s.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s+(?:inline\s+)?>\s*([^\s]+)$/i))) return { kind: 'container', name: m[1], min: m[2], axis: /\sinline\s/i.test(s) ? 'inline' : undefined };
      if ((m = s.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*(?:inline\s+)?<\s*([^\s]+)$/i))) return { kind: 'container', name: m[1], max: m[2], axis: /\sinline\s/i.test(s) ? 'inline' : undefined };
      if ((m = s.match(/^container\s+([a-zA-Z_][a-zA-Z0-9_]*)\s+style\s*\((.+)\)$/i))) return { kind: 'container-style', name: m[1], condition: '(' + m[2].trim() + ')' };
      throw new Error('Invalid WHERE clause part: ' + s);
    }
    const orParts = splitTop(src, 'OR');
    const options = orParts.map(part => {
      const andParts = splitTop(part, 'AND');
      let media = { min: undefined, max: undefined, features: [] };
      let container = null;
      let containerStyle = null;
      let supports = null;
      for (const p of andParts) {
        const cond = parseSingle(p);
        if (cond.kind === 'media') {
          if (cond.min) media.min = cond.min;
          if (cond.max) media.max = cond.max;
          if (cond.features) media.features.push(...cond.features);
        } else if (cond.kind === 'container') {
          if (!container) container = { name: cond.name, min: undefined, max: undefined };
          if (cond.name !== container.name) throw new Error('Cannot combine multiple containers in one WHERE');
          if (cond.min) container.min = cond.min;
          if (cond.max) container.max = cond.max;
        } else if (cond.kind === 'container-style') {
          if (container) throw new Error('Combining container size and style queries is not supported');
          if (containerStyle && containerStyle.name !== cond.name) throw new Error('Cannot combine multiple containers in one WHERE');
          containerStyle = { name: cond.name, condition: cond.condition };
        } else if (cond.kind === 'supports') {
          if (supports) throw new Error('Multiple supports() conditions in one WHERE not supported');
          supports = cond.condition;
        }
      }
      // Allow supports() to mix with media or container; still disallow container-style mix with media for now
      if (containerStyle && (media.min || media.max || (media.features && media.features.length))) {
        throw new Error('Combining container style queries with media conditions is not supported');
      }
      if (containerStyle) return { type: 'ContainerStyle', container: containerStyle.name, condition: containerStyle.condition };
      if (container) {
        const obj: any = { type: 'Container', container: container.name, min: container.min, max: container.max };
        if (supports) obj.supports = supports;
        return obj;
      }
      if (media.min || media.max || (media.features && media.features.length)) {
        const obj: any = { type: 'MediaBundle', min: media.min, max: media.max, features: media.features };
        if (supports) obj.supports = supports;
        return obj;
      }
      if (supports) return { type: 'Supports', condition: supports };
      return { type: 'MediaBundle', min: undefined, max: undefined, features: [] };
    });
    if (options.length === 1) return options[0];
    // Only media OR supported; if any container present among options, throw
    if (options.some(o => o.type === 'Container')) throw new Error('OR composition not supported for container WHERE');
    if (options.some(o => o.type === 'ContainerStyle')) throw new Error('OR composition not supported for container WHERE');
    return { type: 'MediaOr', options };
  }
  function peg$f92(t) {    return t;  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return "";
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseStatementList();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatementList() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseStatement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseStatement();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseStatement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f1(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatement() {
    let s0;

    s0 = peg$parseTokenStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSelectorStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStyleStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAlterStyleStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDMLStyleInsert();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDMLStyleUpdate();
              if (s0 === peg$FAILED) {
                s0 = peg$parseDMLTokenInsert();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseDMLTokenUpdate();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDeleteStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseDropStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseDropTokenStatement();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDropKeyframesStatement();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseDropFontFaceStatement();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseDropPropertyStatement();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseDropPageStatement();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseDropCounterStyleStatement();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseDropFontFeatureValuesStatement();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseDropFontPaletteValuesStatement();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseDropStartingStyleStatement();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseDeleteTokenStatement();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseSelectStylePropsStatement();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseDescribeSelectorStatement();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseBeginStatement();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseCommitStatement();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseRollbackStatement();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseLayerStatement();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseSetLayerStatement();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseButterStatement();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsePropertyStatement();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseFontFaceStatement();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseKeyframesStatement();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseImportStatement();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsePageStatement();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseCounterStyleStatement();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseFontFeatureValuesStatement();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseFontPaletteValuesStatement();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseStartingStyleStatement();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseRawStatement();
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTokenStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 5);
      if (s3.toLowerCase() === peg$c1) {
        peg$currPos += (5);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = input.substr(peg$currPos, 5);
          if (s7.toLowerCase() === peg$c2) {
            peg$currPos += (5);
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseValue();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s11 = peg$c3;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f2(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSelectorStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 8);
      if (s3.toLowerCase() === peg$c4) {
        peg$currPos += (8);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = input.substr(peg$currPos, 2);
          if (s7.toLowerCase() === peg$c5) {
            peg$currPos += (2);
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseSelectorDef();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s11 = peg$c3;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f3(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSelectorDef() {
    let s0;

    s0 = peg$parseAndSelector();
    if (s0 === peg$FAILED) {
      s0 = peg$parseOrSelector();
      if (s0 === peg$FAILED) {
        s0 = peg$parseChildSelector();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDescSelector();
          if (s0 === peg$FAILED) {
            s0 = peg$parseJoinSelector();
            if (s0 === peg$FAILED) {
              s0 = peg$parseElementSelector();
              if (s0 === peg$FAILED) {
                s0 = peg$parseClassSelector();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsePseudoSelector();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsePseudoElementSelector();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseIdFunc();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseAttrFunc();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseRefSelector();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAndSelector() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c6) {
      peg$currPos += (3);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseSelectorDefList();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f4(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOrSelector() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c9) {
      peg$currPos += (2);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseSelectorDefList();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f5(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChildSelector() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c10) {
      peg$currPos += (5);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseSelectorDef();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c11;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseSelectorDef();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c8;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f6(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDescSelector() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c12) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseSelectorDef();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c11;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseSelectorDef();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c8;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f7(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJoinSelector() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c13) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseJoinType();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseSelectorDef();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = input.substr(peg$currPos, 2);
          if (s7.toLowerCase() === peg$c14) {
            peg$currPos += (2);
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseSelectorDef();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f8(s3, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJoinType() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c6) {
      peg$currPos += (3);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c12) {
        peg$currPos += (4);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f10();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c10) {
          peg$currPos += (5);
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f11();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 3);
          if (s1.toLowerCase() === peg$c15) {
            peg$currPos += (3);
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f12();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 3);
            if (s1.toLowerCase() === peg$c16) {
              peg$currPos += (3);
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f13();
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSelectorDefList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSelectorDef();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c11;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseSelectorDef();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c11;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseSelectorDef();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f14(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElementSelector() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c17) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClassSelector() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c18) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f16(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePseudoSelector() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c19) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f17(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePseudoElementSelector() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c20) {
      peg$currPos += (2);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f18(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdFunc() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c21) {
      peg$currPos += (2);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f19(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAttrFunc() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c22) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f20(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c22) {
        peg$currPos += (4);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c7;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseQuotedString();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c11;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseQuotedString();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s11 = peg$c8;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f21(s5, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c22) {
          peg$currPos += (4);
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseQuotedString();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c11;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                s9 = peg$parseQuotedString();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s11 = peg$c11;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e11); }
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse_();
                    s13 = peg$parseQuotedString();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s15 = peg$c8;
                        peg$currPos++;
                      } else {
                        s15 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e8); }
                      }
                      if (s15 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f22(s5, s9, s13);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c22) {
            peg$currPos += (4);
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c7;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseQuotedString();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c11;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e11); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  s9 = peg$parseQuotedString();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s11 = peg$c11;
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e11); }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse_();
                      s13 = peg$parseQuotedString();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s15 = peg$c11;
                          peg$currPos++;
                        } else {
                          s15 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e11); }
                        }
                        if (s15 !== peg$FAILED) {
                          s16 = peg$parse_();
                          s17 = peg$parseQuotedString();
                          if (s17 !== peg$FAILED) {
                            s18 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s19 = peg$c8;
                              peg$currPos++;
                            } else {
                              s19 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e8); }
                            }
                            if (s19 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f23(s5, s9, s13, s17);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseRefSelector() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f24(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStyleStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 5);
      if (s3.toLowerCase() === peg$c23) {
        peg$currPos += (5);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 8);
        if (s5.toLowerCase() === peg$c4) {
          peg$currPos += (8);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseScopeClause();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s11 = peg$c7;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parseStyleProps();
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s15 = peg$c8;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  s17 = peg$parseWhereClause();
                  if (s17 === peg$FAILED) {
                    s17 = null;
                  }
                  s18 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s19 = peg$c3;
                    peg$currPos++;
                  } else {
                    s19 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                  }
                  if (s19 === peg$FAILED) {
                    s19 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f25(s7, s9, s13, s17);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseScopeClause() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c24) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 2);
      if (s3.toLowerCase() === peg$c25) {
        peg$currPos += (2);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          s8 = input.substr(peg$currPos, 5);
          if (s8.toLowerCase() === peg$c26) {
            peg$currPos += (5);
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e26); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseIdentifier();
            if (s10 !== peg$FAILED) {
              s8 = [s8, s9, s10];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f26(s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStyleProps() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseStyleProp();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c11;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseStyleProp();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c11;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseStyleProp();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f27(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStyleProp() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c27;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f28(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAlterStyleStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c28) {
      peg$currPos += (5);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 5);
      if (s3.toLowerCase() === peg$c23) {
        peg$currPos += (5);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 8);
        if (s5.toLowerCase() === peg$c4) {
          peg$currPos += (8);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseWhereClause();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            s11 = peg$parseAlterAction();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parseStyleProps();
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s15 = peg$c3;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f29(s7, s9, s11, s13);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAlterAction() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c29) {
      peg$currPos += (3);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 3);
      if (s1.toLowerCase() === peg$c30) {
        peg$currPos += (3);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f31();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseDeleteStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c31) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 4);
      if (s3.toLowerCase() === peg$c32) {
        peg$currPos += (4);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 11);
        if (s5.toLowerCase() === peg$c33) {
          peg$currPos += (11);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = input.substr(peg$currPos, 5);
          if (s7.toLowerCase() === peg$c34) {
            peg$currPos += (5);
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = input.substr(peg$currPos, 8);
            if (s9.toLowerCase() === peg$c4) {
              peg$currPos += (8);
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e35); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s11 = peg$c27;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e27); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$parseIdentifier();
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s15 = input.substr(peg$currPos, 3);
                  if (s15.toLowerCase() === peg$c6) {
                    peg$currPos += (3);
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e6); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = input.substr(peg$currPos, 4);
                    if (s17.toLowerCase() === peg$c35) {
                      peg$currPos += (4);
                    } else {
                      s17 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e36); }
                    }
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s19 = peg$c27;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e27); }
                      }
                      if (s19 !== peg$FAILED) {
                        s20 = peg$parse_();
                        s21 = peg$parseQuotedString();
                        if (s21 !== peg$FAILED) {
                          s22 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s23 = peg$c3;
                            peg$currPos++;
                          } else {
                            s23 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e3); }
                          }
                          if (s23 === peg$FAILED) {
                            s23 = null;
                          }
                          peg$savedPos = s0;
                          s0 = peg$f32(s13, s21);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 5);
      if (s3.toLowerCase() === peg$c23) {
        peg$currPos += (5);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 8);
        if (s5.toLowerCase() === peg$c4) {
          peg$currPos += (8);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f33(s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropTokenStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 5);
      if (s3.toLowerCase() === peg$c1) {
        peg$currPos += (5);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f34(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropKeyframesStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 9);
      if (s3.toLowerCase() === peg$c37) {
        peg$currPos += (9);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f35(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropFontFaceStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 9);
      if (s3.toLowerCase() === peg$c38) {
        peg$currPos += (9);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 6);
        if (s5.toLowerCase() === peg$c39) {
          peg$currPos += (6);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQuotedString();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f36(s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropPropertyStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 8);
      if (s3.toLowerCase() === peg$c40) {
        peg$currPos += (8);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f37(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeleteTokenStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c31) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 4);
      if (s3.toLowerCase() === peg$c32) {
        peg$currPos += (4);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 6);
        if (s5.toLowerCase() === peg$c41) {
          peg$currPos += (6);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = input.substr(peg$currPos, 5);
          if (s7.toLowerCase() === peg$c34) {
            peg$currPos += (5);
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = input.substr(peg$currPos, 4);
            if (s9.toLowerCase() === peg$c42) {
              peg$currPos += (4);
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e43); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s11 = peg$c27;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e27); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$parseQuotedString();
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s15 = peg$c3;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f38(s13);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSelectStylePropsStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c43) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 11);
      if (s3.toLowerCase() === peg$c33) {
        peg$currPos += (11);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 5);
        if (s5.toLowerCase() === peg$c34) {
          peg$currPos += (5);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = input.substr(peg$currPos, 8);
          if (s7.toLowerCase() === peg$c4) {
            peg$currPos += (8);
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s9 = peg$c27;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e27); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseIdentifier();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$currPos;
                s14 = input.substr(peg$currPos, 3);
                if (s14.toLowerCase() === peg$c6) {
                  peg$currPos += (3);
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  s16 = peg$parseWhereBody();
                  if (s16 !== peg$FAILED) {
                    s14 = [s14, s15, s16];
                    s13 = s14;
                  } else {
                    peg$currPos = s13;
                    s13 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s13;
                  s13 = peg$FAILED;
                }
                if (s13 === peg$FAILED) {
                  s13 = null;
                }
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s15 = peg$c3;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f39(s11, s13);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDescribeSelectorStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 8);
    if (s1.toLowerCase() === peg$c44) {
      peg$currPos += (8);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 8);
      if (s3.toLowerCase() === peg$c4) {
        peg$currPos += (8);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f40(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBeginStatement() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c45) {
      peg$currPos += (5);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c3;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f41();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommitStatement() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c46) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c3;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f42();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRollbackStatement() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 8);
    if (s1.toLowerCase() === peg$c47) {
      peg$currPos += (8);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c3;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f43();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLayerStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 6);
      if (s3.toLowerCase() === peg$c48) {
        peg$currPos += (6);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c7;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseLayerList();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c8;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s11 = peg$c3;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f44(s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLayerList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c11;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseIdentifier();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c11;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f45(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSetLayerStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c30) {
      peg$currPos += (3);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 5);
      if (s3.toLowerCase() === peg$c49) {
        peg$currPos += (5);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c27;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f46(s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseButterStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c30) {
      peg$currPos += (3);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 6);
      if (s3.toLowerCase() === peg$c50) {
        peg$currPos += (6);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c27;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQuotedString();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f47(s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRawStatement() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c51) {
      peg$currPos += (3);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQuotedString();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s5 = peg$c3;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f48(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePropertyStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 8);
      if (s3.toLowerCase() === peg$c40) {
        peg$currPos += (8);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseStyleProps();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c8;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s13 = peg$c3;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s13 === peg$FAILED) {
                  s13 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f49(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFontFaceStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 9);
      if (s3.toLowerCase() === peg$c38) {
        peg$currPos += (9);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 6);
        if (s5.toLowerCase() === peg$c39) {
          peg$currPos += (6);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQuotedString();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s9 = peg$c7;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseStyleProps();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s13 = peg$c8;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s15 = peg$c3;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f50(s7, s11);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKeyframesStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 9);
      if (s3.toLowerCase() === peg$c37) {
        peg$currPos += (9);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseKeyframeList();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c8;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s13 = peg$c3;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s13 === peg$FAILED) {
                  s13 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f51(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKeyframeList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseKeyframeBlock();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c11;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseKeyframeBlock();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c11;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseKeyframeBlock();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f52(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKeyframeBlock() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseQuotedString();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseStyleProps();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f53(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImportStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c52) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 3);
      if (s3.toLowerCase() === peg$c53) {
        peg$currPos += (3);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          s8 = input.substr(peg$currPos, 5);
          if (s8.toLowerCase() === peg$c54) {
            peg$currPos += (5);
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e55); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseIdentifier();
            if (s10 !== peg$FAILED) {
              s8 = [s8, s9, s10];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s9 = peg$c3;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f54(s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 6);
      if (s1.toLowerCase() === peg$c52) {
        peg$currPos += (6);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseQuotedString();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s5 = peg$c3;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f55(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePageStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 4);
      if (s3.toLowerCase() === peg$c55) {
        peg$currPos += (4);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s7 = peg$c7;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseStyleProps();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s11 = peg$c8;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s13 = peg$c3;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s13 === peg$FAILED) {
                s13 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f56(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropPageStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 4);
      if (s3.toLowerCase() === peg$c55) {
        peg$currPos += (4);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s7 = peg$c3;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f57(s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCounterStyleStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 13);
      if (s3.toLowerCase() === peg$c56) {
        peg$currPos += (13);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseStyleProps();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c8;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s13 = peg$c3;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s13 === peg$FAILED) {
                  s13 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f58(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropCounterStyleStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 13);
      if (s3.toLowerCase() === peg$c56) {
        peg$currPos += (13);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f59(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFontFeatureValuesStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 19);
      if (s3.toLowerCase() === peg$c57) {
        peg$currPos += (19);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseStyleProps();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c8;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s13 = peg$c3;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s13 === peg$FAILED) {
                  s13 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f60(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropFontFeatureValuesStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 19);
      if (s3.toLowerCase() === peg$c57) {
        peg$currPos += (19);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f61(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFontPaletteValuesStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 19);
      if (s3.toLowerCase() === peg$c58) {
        peg$currPos += (19);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseStyleProps();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c8;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s13 = peg$c3;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s13 === peg$FAILED) {
                  s13 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f62(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropFontPaletteValuesStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 19);
      if (s3.toLowerCase() === peg$c58) {
        peg$currPos += (19);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c3;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f63(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStartingStyleStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 14);
      if (s3.toLowerCase() === peg$c59) {
        peg$currPos += (14);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 8);
        if (s5.toLowerCase() === peg$c4) {
          peg$currPos += (8);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s9 = peg$c7;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseStyleProps();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s13 = peg$c8;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s15 = peg$c3;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f64(s7, s11);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropStartingStyleStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 14);
      if (s3.toLowerCase() === peg$c59) {
        peg$currPos += (14);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 8);
        if (s5.toLowerCase() === peg$c4) {
          peg$currPos += (8);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c3;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f65(s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDMLStyleInsert() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c60) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 4);
      if (s3.toLowerCase() === peg$c61) {
        peg$currPos += (4);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 11);
        if (s5.toLowerCase() === peg$c33) {
          peg$currPos += (11);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = input.substr(peg$currPos, 8);
            if (s9.toLowerCase() === peg$c4) {
              peg$currPos += (8);
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e35); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s11 = peg$c11;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = input.substr(peg$currPos, 4);
                if (s13.toLowerCase() === peg$c35) {
                  peg$currPos += (4);
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e36); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s15 = peg$c11;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e11); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = input.substr(peg$currPos, 5);
                    if (s17.toLowerCase() === peg$c2) {
                      peg$currPos += (5);
                    } else {
                      s17 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e63); }
                    }
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s19 = peg$c8;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e8); }
                      }
                      if (s19 !== peg$FAILED) {
                        s20 = peg$parse_();
                        s21 = input.substr(peg$currPos, 6);
                        if (s21.toLowerCase() === peg$c62) {
                          peg$currPos += (6);
                        } else {
                          s21 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e64); }
                        }
                        if (s21 !== peg$FAILED) {
                          s22 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s23 = peg$c7;
                            peg$currPos++;
                          } else {
                            s23 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e7); }
                          }
                          if (s23 !== peg$FAILED) {
                            s24 = peg$parse_();
                            s25 = peg$parseIdentifier();
                            if (s25 !== peg$FAILED) {
                              s26 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 44) {
                                s27 = peg$c11;
                                peg$currPos++;
                              } else {
                                s27 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e11); }
                              }
                              if (s27 !== peg$FAILED) {
                                s28 = peg$parse_();
                                s29 = peg$parseQuotedString();
                                if (s29 !== peg$FAILED) {
                                  s30 = peg$parse_();
                                  if (input.charCodeAt(peg$currPos) === 44) {
                                    s31 = peg$c11;
                                    peg$currPos++;
                                  } else {
                                    s31 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e11); }
                                  }
                                  if (s31 !== peg$FAILED) {
                                    s32 = peg$parse_();
                                    s33 = peg$parseValue();
                                    if (s33 !== peg$FAILED) {
                                      s34 = peg$parse_();
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s35 = peg$c8;
                                        peg$currPos++;
                                      } else {
                                        s35 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e8); }
                                      }
                                      if (s35 !== peg$FAILED) {
                                        s36 = peg$parse_();
                                        if (input.charCodeAt(peg$currPos) === 59) {
                                          s37 = peg$c3;
                                          peg$currPos++;
                                        } else {
                                          s37 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e3); }
                                        }
                                        if (s37 === peg$FAILED) {
                                          s37 = null;
                                        }
                                        peg$savedPos = s0;
                                        s0 = peg$f66(s25, s29, s33);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignment() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c27;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f67(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignmentList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAssignment();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c11;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseAssignment();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c11;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseAssignment();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f68(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDMLStyleUpdate() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c63) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 11);
      if (s3.toLowerCase() === peg$c33) {
        peg$currPos += (11);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 3);
        if (s5.toLowerCase() === peg$c30) {
          peg$currPos += (3);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseAssignmentList();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = input.substr(peg$currPos, 5);
            if (s9.toLowerCase() === peg$c34) {
              peg$currPos += (5);
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e34); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = input.substr(peg$currPos, 8);
              if (s11.toLowerCase() === peg$c4) {
                peg$currPos += (8);
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e35); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 61) {
                  s13 = peg$c27;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e27); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s15 = peg$parseIdentifier();
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = peg$currPos;
                    s18 = input.substr(peg$currPos, 3);
                    if (s18.toLowerCase() === peg$c6) {
                      peg$currPos += (3);
                    } else {
                      s18 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e6); }
                    }
                    if (s18 !== peg$FAILED) {
                      s19 = peg$parse_();
                      s20 = peg$parseWhereBody();
                      if (s20 !== peg$FAILED) {
                        s18 = [s18, s19, s20];
                        s17 = s18;
                      } else {
                        peg$currPos = s17;
                        s17 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s17;
                      s17 = peg$FAILED;
                    }
                    if (s17 === peg$FAILED) {
                      s17 = null;
                    }
                    s18 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s19 = peg$c3;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e3); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f69(s7, s15, s17);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDMLTokenInsert() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c60) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 4);
      if (s3.toLowerCase() === peg$c61) {
        peg$currPos += (4);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 6);
        if (s5.toLowerCase() === peg$c41) {
          peg$currPos += (6);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = input.substr(peg$currPos, 4);
            if (s9.toLowerCase() === peg$c42) {
              peg$currPos += (4);
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e43); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s11 = peg$c11;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = input.substr(peg$currPos, 5);
                if (s13.toLowerCase() === peg$c2) {
                  peg$currPos += (5);
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e63); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s15 = peg$c8;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e8); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = input.substr(peg$currPos, 6);
                    if (s17.toLowerCase() === peg$c62) {
                      peg$currPos += (6);
                    } else {
                      s17 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e64); }
                    }
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s19 = peg$c7;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e7); }
                      }
                      if (s19 !== peg$FAILED) {
                        s20 = peg$parse_();
                        s21 = peg$parseQuotedString();
                        if (s21 !== peg$FAILED) {
                          s22 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s23 = peg$c11;
                            peg$currPos++;
                          } else {
                            s23 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e11); }
                          }
                          if (s23 !== peg$FAILED) {
                            s24 = peg$parse_();
                            s25 = peg$parseValue();
                            if (s25 !== peg$FAILED) {
                              s26 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s27 = peg$c8;
                                peg$currPos++;
                              } else {
                                s27 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e8); }
                              }
                              if (s27 !== peg$FAILED) {
                                s28 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 59) {
                                  s29 = peg$c3;
                                  peg$currPos++;
                                } else {
                                  s29 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                                }
                                if (s29 === peg$FAILED) {
                                  s29 = null;
                                }
                                peg$savedPos = s0;
                                s0 = peg$f70(s21, s25);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDMLTokenUpdate() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c63) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.substr(peg$currPos, 6);
      if (s3.toLowerCase() === peg$c41) {
        peg$currPos += (6);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = input.substr(peg$currPos, 3);
        if (s5.toLowerCase() === peg$c30) {
          peg$currPos += (3);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = input.substr(peg$currPos, 5);
          if (s7.toLowerCase() === peg$c2) {
            peg$currPos += (5);
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e63); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s9 = peg$c27;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e27); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseValue();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = input.substr(peg$currPos, 5);
                if (s13.toLowerCase() === peg$c34) {
                  peg$currPos += (5);
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e34); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s15 = input.substr(peg$currPos, 4);
                  if (s15.toLowerCase() === peg$c42) {
                    peg$currPos += (4);
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e43); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s17 = peg$c27;
                      peg$currPos++;
                    } else {
                      s17 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e27); }
                    }
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse_();
                      s19 = peg$parseQuotedString();
                      if (s19 !== peg$FAILED) {
                        s20 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s21 = peg$c3;
                          peg$currPos++;
                        } else {
                          s21 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e3); }
                        }
                        if (s21 === peg$FAILED) {
                          s21 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f71(s11, s19);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifier() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r1.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r1.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseQuotedString() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDoubleQuotedChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDoubleQuotedChar();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c64;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f72(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c65;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSingleQuotedChar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSingleQuotedChar();
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c65;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f73(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDoubleQuotedChar() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c66) {
      s1 = peg$c66;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f74();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c67) {
        s1 = peg$c67;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f75();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c68) {
          s1 = peg$c68;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f76();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c69) {
            s1 = peg$c69;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e73); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f77();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = input.charAt(peg$currPos);
            if (peg$r2.test(s0)) {
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e74); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSingleQuotedChar() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c70) {
      s1 = peg$c70;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f78();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c67) {
        s1 = peg$c67;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f79();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c68) {
          s1 = peg$c68;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f80();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c69) {
            s1 = peg$c69;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e73); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f81();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = input.charAt(peg$currPos);
            if (peg$r3.test(s0)) {
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e76); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseValue() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseValAtom();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$parseStopToken();
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseValAtom();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseStopToken();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseValAtom();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f82(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValAtom() {
    let s0;

    s0 = peg$parseFunctionCall();
    if (s0 === peg$FAILED) {
      s0 = peg$parseQuotedValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBareValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFallbackValue();
        }
      }
    }

    return s0;
  }

  function peg$parseStopToken() {
    let s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c34) {
      peg$currPos += (5);
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 3);
      if (s0.toLowerCase() === peg$c6) {
        peg$currPos += (3);
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 2);
        if (s0.toLowerCase() === peg$c9) {
          peg$currPos += (2);
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 6);
          if (s0.toLowerCase() === peg$c62) {
            peg$currPos += (6);
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e64); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 3);
            if (s0.toLowerCase() === peg$c30) {
              peg$currPos += (3);
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e30); }
            }
            if (s0 === peg$FAILED) {
              s0 = input.charAt(peg$currPos);
              if (peg$r4.test(s0)) {
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e77); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseQuotedValue() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDoubleQuotedChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDoubleQuotedChar();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c64;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f83(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c65;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSingleQuotedChar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSingleQuotedChar();
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c65;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f84(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseFunctionCall() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseFuncContent();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s7 = peg$c8;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f85(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFuncContent() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseFuncChunk();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseFuncChunk();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseFuncChunk();
      }
      peg$savedPos = s0;
      s0 = peg$f86(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFuncChunk() {
    let s0;

    s0 = peg$parseQuotedValue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNestedParens();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRawRun();
      }
    }

    return s0;
  }

  function peg$parseNestedParens() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseFuncContent();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c8;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f87(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRawRun() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$currPos;
    peg$silentFails++;
    s5 = input.charAt(peg$currPos);
    if (peg$r5.test(s5)) {
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    peg$silentFails--;
    if (s5 === peg$FAILED) {
      s4 = undefined;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = input.charAt(peg$currPos);
        if (peg$r5.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e78); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e79); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f88(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBareValue() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r6.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r6.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e80); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f89(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFallbackValue() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r7.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r7.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f90(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parse_() {
    let s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r8.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parseLineComment();
      if (s1 === peg$FAILED) {
        s1 = peg$parseBlockComment();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r8.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e82); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseLineComment();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBlockComment();
        }
      }
    }

    return s0;
  }

  function peg$parseLineComment() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c71) {
      s1 = peg$c71;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r9.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r9.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e84); }
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c72) {
        s3 = peg$c72;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e85); }
      }
      if (s3 === peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r10.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e86); }
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBlockComment() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c73) {
      s1 = peg$c73;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c74) {
        s5 = peg$c74;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e79); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c74) {
          s5 = peg$c74;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e88); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e79); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c74) {
        s3 = peg$c74;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhereClause() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c34) {
      peg$currPos += (5);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseWhereBody();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f91(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhereBody() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$currPos;
    peg$silentFails++;
    s5 = peg$currPos;
    s6 = input.charAt(peg$currPos);
    if (s6.toLowerCase() === peg$c75) {
      peg$currPos++;
    } else {
      s6 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s6 !== peg$FAILED) {
      s7 = input.charAt(peg$currPos);
      if (s7.toLowerCase() === peg$c17) {
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s7 !== peg$FAILED) {
        s8 = input.charAt(peg$currPos);
        if (s8.toLowerCase() === peg$c76) {
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
        if (s8 !== peg$FAILED) {
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    peg$silentFails--;
    if (s5 === peg$FAILED) {
      s4 = undefined;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$currPos;
      s7 = input.charAt(peg$currPos);
      if (s7.toLowerCase() === peg$c77) {
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e91); }
      }
      if (s7 !== peg$FAILED) {
        s8 = input.charAt(peg$currPos);
        if (s8.toLowerCase() === peg$c78) {
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e92); }
        }
        if (s8 !== peg$FAILED) {
          s9 = input.charAt(peg$currPos);
          if (s9.toLowerCase() === peg$c78) {
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e92); }
          }
          if (s9 !== peg$FAILED) {
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 59) {
          s7 = peg$c3;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        peg$silentFails--;
        if (s7 === peg$FAILED) {
          s6 = undefined;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e79); }
          }
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$currPos;
        s6 = input.charAt(peg$currPos);
        if (s6.toLowerCase() === peg$c75) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e89); }
        }
        if (s6 !== peg$FAILED) {
          s7 = input.charAt(peg$currPos);
          if (s7.toLowerCase() === peg$c17) {
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
          if (s7 !== peg$FAILED) {
            s8 = input.charAt(peg$currPos);
            if (s8.toLowerCase() === peg$c76) {
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e90); }
            }
            if (s8 !== peg$FAILED) {
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$currPos;
          s7 = input.charAt(peg$currPos);
          if (s7.toLowerCase() === peg$c77) {
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e91); }
          }
          if (s7 !== peg$FAILED) {
            s8 = input.charAt(peg$currPos);
            if (s8.toLowerCase() === peg$c78) {
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e92); }
            }
            if (s8 !== peg$FAILED) {
              s9 = input.charAt(peg$currPos);
              if (s9.toLowerCase() === peg$c78) {
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e92); }
              }
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = undefined;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 59) {
              s7 = peg$c3;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = undefined;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e79); }
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f92(s1);
    }
    s0 = s1;

    return s0;
  }

  peg$result = peg$startRuleFunction();

  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

const peg$allowedStartRules = [
  "Start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};

